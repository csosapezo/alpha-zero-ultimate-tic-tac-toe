import jsonimport numpy as npfrom keras.layers import Dense, BatchNormalization, Dropoutfrom keras.models import Sequential, load_modelclass NNUltimateLearning:    def __init__(self, filename):        self.values = {}        self.model = load_model(filename)        self.initializeModel()    def initializeModel(self):        self.model = Sequential()        self.model.add(Dense(81, input_dim=81, activation='relu'))        self.model.add(BatchNormalization(axis=1))        self.model.add(Dropout(0.2))        self.model.add(Dense(27, activation='relu'))        self.model.add(BatchNormalization(axis=1))        self.model.add(Dropout(0.3))        self.model.add(Dense(9, activation='relu'))        self.model.add(BatchNormalization(axis=1))        self.model.add(Dropout(0.4))        self.model.add(Dense(1, activation='linear', kernel_initializer='glorot_uniform'))    def resetForNewGame(self):        self.values = {}    def trainModel(self, boardStates, y):        self.model.fit(np.asarray(boardStates), np.asarray(y), verbose=0)    def getPrediction(self, boardState):        return self.model.predict(boardState.reshape((1, 81)))[0]    def getBoardStateValue(self, player, board,                           boardState):  # TODO: Can batch the inputs to do several predictions at once        predY = self.getPrediction(boardState)[0]        if board.is_win(player):            predY = 1.0        elif board.is_win(-player):            predY = 0.0        elif not board.has_legal_moves():            predY = 0.5        else:            pass        return predY    def learnFromMove(self, player, board, prevBoardState):        curBoardState = board.getBoardState()        curBoardStateValue = self.getBoardStateValue(player, board, curBoardState)        prevBoardStateValue = self.getPrediction(prevBoardState)[0]        self.values[prevBoardState] = prevBoardStateValue + 0.2 * (curBoardStateValue - prevBoardStateValue)    def printValues(self):        pass    def saveLearning(self, filename):        self.model.save(filename)    def loadLearning(self, filename):        self.model = load_model(filename)